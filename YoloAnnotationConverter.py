import os
import xml.etree.ElementTree as ET

class YoloAnnotationConverter:
    """Converts LabelImg XML annotations to YOLOv7 format.

    This class reads XML files generated by LabelImg and converts the annotations
    to a format compatible with YOLOv7. It inherits the class dictionary and other
    relevant data from an instance of the YoloMancer class.

    Author: Dr. Bart Geurten
    Date: 23rd October 2023
    """

    def __init__(self, yolo_mancer):
        """Initializes the YoloAnnotationConverter class.

        Args:
            yolo_mancer (YoloMancer): An instance of the YoloMancer class.
        """
        self.class_dict = yolo_mancer.class_dict

    def read_labelimg_xml(self, xml_file):
        """Reads LabelImg XML annotations and converts to YOLOv7 format.

        Args:
            xml_file (str): Path to the LabelImg XML file.

        Returns:
            list: A list of tuples containing class label and bounding box coordinates.
        """
        annotations = []
        tree = ET.parse(xml_file)
        root = tree.getroot()
        img_width = int(root.find('size')[0].text)
        img_height = int(root.find('size')[1].text)
        
        for member in root.findall('object'):
            class_name = member.find('name').text
            class_label = self.class_dict.get(class_name, 0)  # Default to 0 if class is not found
            
            xmin = int(member.find('bndbox').find('xmin').text)
            ymin = int(member.find('bndbox').find('ymin').text)
            xmax = int(member.find('bndbox').find('xmax').text)
            ymax = int(member.find('bndbox').find('ymax').text)
            
            # Normalize and convert to YOLO format
            x_center = ((xmin + xmax) / 2) / img_width
            y_center = ((ymin + ymax) / 2) / img_height
            width = (xmax - xmin) / img_width
            height = (ymax - ymin) / img_height
            
            annotations.append((class_label, x_center, y_center, width, height))
        
        return annotations

    def save_yolov7_annotations(self, annotations, save_path):
        """Saves annotations in YOLOv7 format.

        Args:
            annotations (list): List of tuples containing class label and bounding box coordinates.
            save_path (str): Path to save the YOLOv7 formatted annotation file.

        Returns:
            None: Writes the annotation to a text file.
        """
        with open(save_path, 'w') as f:
            for annotation in annotations:
                f.write(" ".join(map(str, annotation)) + '\n')

# Usage
yolo_mancer = YoloMancer()
yolo_mancer.add_class("Penguin", 0)

annotation_converter = YoloAnnotationConverter(yolo_mancer)
annotations = annotation_converter.read_labelimg_xml('/path/to/labelimg/xml')
annotation_converter.save_yolov7_annotations(annotations, '/path/to/save/yolov7_annotation.txt')
